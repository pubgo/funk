syntax = "proto3";

package demo.test.v1;

import "google/protobuf/descriptor.proto";
import "errorpb/options.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/httpbody.proto";
import "google/protobuf/empty.proto";
import "cloudjobs/options.proto";

option go_package = "github.com/pubgo/funk/proto/testcodepb;testcodepb";

enum Code {
  option (errors.opts).gen = true;
  option (errors.opts).default_code = Internal;
  option (errors.opts).name = "Test";

  OK = 0;

  // NotFound 找不到
  NotFound = 100000 [
    (errors.field).code = NotFound
  ];

  // Unknown 未知
  Unknown = 100001 [
    (errors.field).code = NotFound
  ];

  // db connect error
  DbConn = 100003 [
    (errors.field).code = Internal
  ];

  // default code
  UnknownCode = 100004;

  // custom msg, 注释可以做其他的操作
  CustomCode = 100005[
    (errors.field).msg = "this is custom msg"
  ];
}


message User {
  message Role {
    enum Type {
      // 租户
      tenant = 0;

      // 安保
      guard = 1;

      // 管理者
      manager = 2;

      // 后台管理员
      admin = 3;
    }
  }
}

service Id {
  option (google.api.default_host) = "localhost:8080";
  option (lava.cloudjobs.job_name) = "gid";

  // Generate 生成ID
  rpc Generate (GenerateRequest) returns (GenerateResponse) {
    option (google.api.http) = {
      post: "/v1/id/generate"
      body: "*"
    };
  }

  // 返回流
  rpc TypeStream (TypesRequest) returns (stream TypesResponse) {
    option (google.api.http).get = "/v1/id/types1";
  }

  // Types id类型
  rpc Types (TypesRequest) returns (TypesResponse) {
    option (google.api.http).get = "/v1/id/types/{name}/{name_id}";
  }

  rpc PutTypes (TypesRequest) returns (TypesResponse) {
    option (google.api.http).put = "/v1/id/types/{name}/{name_id}";
    option (google.api.http).body = "*";
  }

  // 聊天
  rpc Chat (stream ChatMessage) returns (stream ChatMessage) {

    option (google.api.http) = {
      post: "/ws/chat"
      body: "msg"
    };
  }

  // ws: chat1
  rpc Chat1 (stream ChatMessage) returns (stream ChatMessage) {}

  rpc UploadDownload (UploadFileRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      post: "/files/{filename}"
      body: "file"
    };
  }

  rpc DoProxy (Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/proxy/test"
    };
  }

  rpc ProxyExecEvent (DoProxyEventReq) returns (google.protobuf.Empty) {
    option (lava.cloudjobs.subject_name) = "gid.proxy.exec";
  }

  rpc EventChanged (DoProxyEventReq) returns (google.protobuf.Empty) {
    option (lava.cloudjobs.subject_name) = "gid.event.update";
  }
}

message GenerateResponse {
  // the unique id generated
  string id = 1;
  // the type of id generated
  string type = 2;
}

message DoProxyEventReq {

}

message Empty {
}

message UploadFileRequest {
  string filename = 1;
  google.api.HttpBody file = 2;
}

message ChatMessage {
  string name = 1;
  string session_id = 3;
  Message msg = 2;
}

message Message {
  string name = 1;
  string text = 2;
}

enum GenType {
  default = 0;
  uuid = 1;
  snowflake = 2;
  bigflake = 3;
  shortid = 4;
}

// Generate a unique ID. Defaults to uuid.
message GenerateRequest {
  // type of id e.g uuid, shortid, snowflake (64 bit), bigflake (128 bit)
  GenType type = 1;
}

// List the types of IDs available. No query params needed.
message TypesRequest {
  string name = 1;
  uint64 name_id = 2;
  string hello = 3;
}

// TypesResponse 返回值类型
message TypesResponse {
  repeated string types = 1;
}
