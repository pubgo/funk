package internal

import (
	"fmt"

	"github.com/dave/jennifer/jen"
	"google.golang.org/protobuf/compiler/protogen"
)

// GenerateFile generates a .errors.pb.go file containing service definitions.
func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + ".pb.sql.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	genFile := jen.NewFile(string(file.GoPackageName))
	genFile.HeaderComment("Code generated by protoc-gen-go-sql. DO NOT EDIT.")
	genFile.HeaderComment("versions:")
	genFile.HeaderComment(fmt.Sprintf("- protoc-gen-go-sql %s", version))
	genFile.HeaderComment(fmt.Sprintf("- protoc                 %s", protocVersion(gen)))
	if file.Proto.GetOptions().GetDeprecated() {
		genFile.HeaderComment(fmt.Sprintf("%s is a deprecated file.", file.Desc.Path()))
	} else {
		genFile.HeaderComment(fmt.Sprintf("source: %s", file.Desc.Path()))
	}

	genFile.Comment("This is a compile-time assertion to ensure that this generated file")
	genFile.Comment("is compatible with the grpc package it is being compiled against.")
	genFile.Comment("Requires gRPC-Go v1.32.0 or later.")
	genFile.Id("const _ =").Qual("google.golang.org/grpc", "SupportPackageIsVersion7")

	g.Skip()
	forEachMessage(nil, file.Messages, func(parent, child *protogen.Message) {
		if child.Desc.IsMapEntry() {
			return
		}

		// if val==nil{
		//		return nil
		//	}
		g.Unskip()
		genFile.
			Func().Params(jen.Id("x *").Id(child.GoIdent.GoName)).
			Id("Scan").Params(jen.Id("val interface{}")).Error().
			BlockFunc(func(group *jen.Group) {
				group.If(jen.Id("val").Op("==").Nil()).BlockFunc(func(group *jen.Group) {
					group.Return(jen.Nil())
				}).Line()

				group.Return(
					jen.Qual("google.golang.org/protobuf/encoding/protojson", "UnmarshalOptions").
						Values(jen.Dict{jen.Id("DiscardUnknown"): jen.True()}).
						Dot("Unmarshal").Call(jen.Id("val.([]byte)"), jen.Id("x")),
				)
			})
		genFile.Line()

		genFile.
			Func().Params(jen.Id("x *").Id(child.GoIdent.GoName)).
			Id("Value").Params().Params(jen.Qual("database/sql/driver", "Value"), jen.Error()).
			BlockFunc(func(group *jen.Group) {
				group.Var().Id("val").Op(",").Id("err").Op("=").
					Qual("google.golang.org/protobuf/encoding/protojson", "MarshalOptions").
					Values(jen.Dict{
						jen.Id("UseEnumNumbers"):  jen.False(),
						jen.Id("EmitUnpopulated"): jen.False(),
						jen.Id("UseProtoNames"):   jen.False(),
					}).Dot("Marshal").Call(jen.Id("x")).Line()

				group.If(jen.Id("err").Op("==").Nil()).Block(jen.Return(jen.Id("string(val)").Op(",").Nil()))
				group.Return(jen.Nil().Op(",").Id("err"))
			})
		genFile.Line()
	})

	g.P(genFile.GoString())
	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func forEachMessage(parent *protogen.Message, children []*protogen.Message, f func(parent, child *protogen.Message)) {
	for _, child := range children {
		f(parent, child)
		forEachMessage(child, child.Messages, f)
	}
}
